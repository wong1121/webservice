/*
 * [다형성]=========================
 * 1. 부모의 참조변수로 자식 객체를 가리킴  >> 부모의 참조변수로 자식의 객체를 찾아간다. = 참조변수 타입이 달라진다.
 * 
 */
class Parent {
	private int money = 1000000;
	
	public void spend(int money) {
		this.money -= money;
		System.out.println("남은 돈은 " + this.money + "입니다");
	}
	
	public void working() {
		System.out.println("부모님은 열심히 일하는 중입니다.");
	}
}

class Son extends Parent {
	public void play () {
		System.out.println("놀고있지");
	}
	
	/*[method overriding]
	 * - 상속관계에서 부모의 멤버 메서드를 자식이 재정의
	 * - 선언부는 그대로 사용하고, body(기능)만 수정
	 * - 접근권한은 부모의 멤버 메서드보다 크거나 같아야 한다
	 */
	@Override
	public void spend(int money) {
		System.out.println("나는 override 된 메서드");
		System.out.println("부모님 용돈 " + money + "원 주세요");
		System.out.println();
	}
}

class Daughter extends Parent {
	public void study() {
		System.out.println("공부 중");
	}
	@Override
	public void spend(int money) {
		System.out.println("[overriding 된 메서드]");
		System.out.println("부모님 학원비 " + money + "원 주세요");
		System.out.println();
	}
}

public class PolymorhismEx01 {
	public static void main(String[] args) {
		
		Parent p = new Parent();
		
//		[다형성] 부모의 참조변수로 자식의 객체를 가리킴
		Parent p2 = new Son();
		p2.spend(100);
//		p2.play();  : 부모는 자식의 객체를 모르기 때문에 error!
		Parent p3 = new Daughter();
		p3.spend(200);  // 오버라이딩전엔 부모 객체 사용.
		
//		Daughter d = new Parent(); 얘는 다양성이 아니야.
		
		//[객체 배열]
		//[첫 번째 형태] 객체 배열 생성 후 초기화
		Parent[] p4 = new Parent[2];
		p4[0] = new Son();
		p4[1] = new Daughter();
		
		p4[0].spend(50000);
		p4[1].spend(60000);
		
		//[두 번째 형태] 객체 배열 생성과 동시에 초기화
		Parent[] p5 = new parent[] {new Son(), new Daughter()};
		Parent[] p5 = {new Son(), new Daughter()};
		
		Son s = new Son(); // 다형성x, 자기 객체를 찾아감.
		s.spend(10000);

	}
}
